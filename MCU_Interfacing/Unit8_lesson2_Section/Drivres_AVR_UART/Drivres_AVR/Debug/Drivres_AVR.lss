
Drivres_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000028a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0a  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cf  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060f  00000000  00000000  0000181d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004aa  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000439  00000000  00000000  00002462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000289b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  7a:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_KICK>:
#include "lcd.h"


void LCD_KICK()
{
	LCD_CTRL &= ~(1<<EN_SWITCH) ;
  82:	88 b3       	in	r24, 0x18	; 24
  84:	87 7f       	andi	r24, 0xF7	; 247
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_KICK+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_KICK+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |= (1<<EN_SWITCH) ;
  94:	88 b3       	in	r24, 0x18	; 24
  96:	88 60       	ori	r24, 0x08	; 8
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_isBUSY>:
}

void LCD_isBUSY(void)
{
	DataDir_LCD_PORT = 0x00 ;
  9c:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= (1<<RW_SWITCH);
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RS_SWITCH);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	DataDir_LCD_PORT = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1<<RW_SWITCH);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
}


void LCD_WRITE_COMMAND(unsigned char command)
{
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
	LCD_CTRL &= ~(1<<RW_SWITCH)|(1<<RS_SWITCH); // Clear
	LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_isBUSY();
  be:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_isBUSY>
	LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	9c 2f       	mov	r25, r28
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	89 7f       	andi	r24, 0xF9	; 249
  d2:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  d4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
  d8:	2b b3       	in	r18, 0x1b	; 27
  da:	30 e1       	ldi	r19, 0x10	; 16
  dc:	c3 9f       	mul	r28, r19
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	92 2f       	mov	r25, r18
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	89 2b       	or	r24, r25
  e8:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	89 7f       	andi	r24, 0xF9	; 249
  ee:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  f0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	#endif
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <LCD_clear_screen>:
}


void LCD_clear_screen()
{
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);	
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
  fe:	08 95       	ret

00000100 <LCD_GOTO_XY>:
}

void LCD_GOTO_XY(unsigned char line , unsigned char position)
{
	if(line==1)
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	39 f4       	brne	.+14     	; 0x112 <LCD_GOTO_XY+0x12>
	{
		if(position <16 && position >=0)
 104:	60 31       	cpi	r22, 0x10	; 16
 106:	68 f4       	brcc	.+26     	; 0x122 <LCD_GOTO_XY+0x22>
		LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	86 0f       	add	r24, r22
 10c:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
 110:	08 95       	ret
	}
	else if (line==2)
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	31 f4       	brne	.+12     	; 0x122 <LCD_GOTO_XY+0x22>
	if(position <16 && position >=0)
 116:	60 31       	cpi	r22, 0x10	; 16
 118:	20 f4       	brcc	.+8      	; 0x122 <LCD_GOTO_XY+0x22>
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 11a:	80 ec       	ldi	r24, 0xC0	; 192
 11c:	86 0f       	add	r24, r22
 11e:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
 122:	08 95       	ret

00000124 <LCD_Init>:
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	93 e1       	ldi	r25, 0x13	; 19
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Init+0x4>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Init+0xa>
 12e:	00 00       	nop

//initialize LCD
void LCD_Init(void)
{
	_delay_ms(20);
	LCD_isBUSY();
 130:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_isBUSY>
	DataDir_LCD_CTRL |= ((1<<EN_SWITCH)|(1<<RW_SWITCH)|(1<<RS_SWITCH)); // Set as output
 134:	87 b3       	in	r24, 0x17	; 23
 136:	8e 60       	ori	r24, 0x0E	; 14
 138:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~((1<<EN_SWITCH)|(1<<RW_SWITCH)|(1<<RS_SWITCH)); // Clear
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	81 7f       	andi	r24, 0xF1	; 241
 13e:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF; // Set Port as Output
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a bb       	out	0x1a, r24	; 26
 144:	85 ea       	ldi	r24, 0xA5	; 165
 146:	9e e0       	ldi	r25, 0x0E	; 14
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_Init+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_Init+0x2a>
 14e:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 150:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02); // As datasheet
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
	#endif
	
	LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
 172:	08 95       	ret

00000174 <LCD_WRITE_CHAR>:
	#endif
}


void LCD_WRITE_CHAR(unsigned char data)
{
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	LCD_CTRL &= ~(1<<RW_SWITCH); // Turn RW OFF for write mode
	LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	9c 2f       	mov	r25, r28
 17e:	90 7f       	andi	r25, 0xF0	; 240
 180:	89 2b       	or	r24, r25
 182:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= (1<<RS_SWITCH); // Turn RS ON for data mode
 184:	88 b3       	in	r24, 0x18	; 24
 186:	82 60       	ori	r24, 0x02	; 2
 188:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RW_SWITCH); // Turn RW OFF for write mode
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	8b 7f       	andi	r24, 0xFB	; 251
 18e:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 190:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4);
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	30 e1       	ldi	r19, 0x10	; 16
 198:	c3 9f       	mul	r28, r19
 19a:	c0 01       	movw	r24, r0
 19c:	11 24       	eor	r1, r1
 19e:	92 2f       	mov	r25, r18
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	89 2b       	or	r24, r25
 1a4:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= (1<<RS_SWITCH); // Turn RS ON for data mode
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RW_SWITCH); // Turn RW OFF for write mode
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	8b 7f       	andi	r24, 0xFB	; 251
 1b0:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	#endif
}
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(char * str)
{
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	8c 01       	movw	r16, r24
	int count = 0; // To count how much char on the line (it should be 16 char only)
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (*str)
 1c8:	19 c0       	rjmp	.+50     	; 0x1fc <LCD_WRITE_STRING+0x42>
	{
		count++;
 1ca:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*str++);
 1cc:	0f 5f       	subi	r16, 0xFF	; 255
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 1d0:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_WRITE_CHAR>
		if (count == 16) // Go to the second line
 1d4:	c0 31       	cpi	r28, 0x10	; 16
 1d6:	d1 05       	cpc	r29, r1
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(1,0); // Line 1 position 0
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 80 00 	call	0x100	; 0x100 <LCD_GOTO_XY>
 1e2:	0c c0       	rjmp	.+24     	; 0x1fc <LCD_WRITE_STRING+0x42>
		}
		else if (count == 32 || count == 33) // Clear screen and show again
 1e4:	ce 01       	movw	r24, r28
 1e6:	80 97       	sbiw	r24, 0x20	; 32
 1e8:	02 97       	sbiw	r24, 0x02	; 2
 1ea:	40 f4       	brcc	.+16     	; 0x1fc <LCD_WRITE_STRING+0x42>
		{
			LCD_clear_screen();
 1ec:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_clear_screen>
			LCD_GOTO_XY(0,0); // Line 0 Position 0
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 80 00 	call	0x100	; 0x100 <LCD_GOTO_XY>
			count = 0;
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
}
void LCD_WRITE_STRING(char * str)
{
	int count = 0; // To count how much char on the line (it should be 16 char only)
	
	while (*str)
 1fc:	f8 01       	movw	r30, r16
 1fe:	80 81       	ld	r24, Z
 200:	81 11       	cpse	r24, r1
 202:	e3 cf       	rjmp	.-58     	; 0x1ca <LCD_WRITE_STRING+0x10>
			LCD_GOTO_XY(0,0); // Line 0 Position 0
			count = 0;
		}
	}

}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <main>:


int main(void)
{
	/* Replace with your application code */
	LCD_Init();
 20e:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Init>
	UART_Init();
 212:	0e 94 18 01 	call	0x230	; 0x230 <UART_Init>
	
	LCD_WRITE_STRING("UART TEST");
 216:	80 e6       	ldi	r24, 0x60	; 96
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_WRITE_STRING>
	
	UART_SendString(" HELLO");
 21e:	8a e6       	ldi	r24, 0x6A	; 106
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 2c 01 	call	0x258	; 0x258 <UART_SendString>
	while (1)
	{
		LCD_WRITE_STRING(UART_ReceiveString());
 226:	0e 94 39 01 	call	0x272	; 0x272 <UART_ReceiveString>
 22a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_WRITE_STRING>
 22e:	fb cf       	rjmp	.-10     	; 0x226 <main+0x18>

00000230 <UART_Init>:
	p[0]=UART_Receive();
	p[1]=UART_Receive();
	p[2]=UART_Receive();
	p[3]=UART_Receive();
	return num;
}
 230:	83 e3       	ldi	r24, 0x33	; 51
 232:	89 b9       	out	0x09, r24	; 9
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	8d 7f       	andi	r24, 0xFD	; 253
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	8a b1       	in	r24, 0x0a	; 10
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	8a b9       	out	0x0a, r24	; 10
 240:	8a b1       	in	r24, 0x0a	; 10
 242:	80 61       	ori	r24, 0x10	; 16
 244:	8a b9       	out	0x0a, r24	; 10
 246:	08 95       	ret

00000248 <UART_Send>:
 248:	5d 9b       	sbis	0x0b, 5	; 11
 24a:	fe cf       	rjmp	.-4      	; 0x248 <UART_Send>
 24c:	8c b9       	out	0x0c, r24	; 12
 24e:	08 95       	ret

00000250 <UART_Receive>:
 250:	5f 9b       	sbis	0x0b, 7	; 11
 252:	fe cf       	rjmp	.-4      	; 0x250 <UART_Receive>
 254:	8c b1       	in	r24, 0x0c	; 12
 256:	08 95       	ret

00000258 <UART_SendString>:


void UART_SendString(char *data)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
	while(*data != '\0')
 25e:	03 c0       	rjmp	.+6      	; 0x266 <UART_SendString+0xe>
	{
		UART_Send(*data);
 260:	0e 94 24 01 	call	0x248	; 0x248 <UART_Send>
		data++;
 264:	21 96       	adiw	r28, 0x01	; 1
}


void UART_SendString(char *data)
{
	while(*data != '\0')
 266:	88 81       	ld	r24, Y
 268:	81 11       	cpse	r24, r1
 26a:	fa cf       	rjmp	.-12     	; 0x260 <UART_SendString+0x8>
	{
		UART_Send(*data);
		data++;
	}
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <UART_ReceiveString>:

char * UART_ReceiveString(void)
{
	char data[50],i=0;
	char get =UART_Receive();
 272:	0e 94 28 01 	call	0x250	; 0x250 <UART_Receive>
	
	while(get!='#')
 276:	02 c0       	rjmp	.+4      	; 0x27c <UART_ReceiveString+0xa>
	{
		data[i]=get;
		get =UART_Receive();
 278:	0e 94 28 01 	call	0x250	; 0x250 <UART_Receive>
char * UART_ReceiveString(void)
{
	char data[50],i=0;
	char get =UART_Receive();
	
	while(get!='#')
 27c:	83 32       	cpi	r24, 0x23	; 35
 27e:	e1 f7       	brne	.-8      	; 0x278 <UART_ReceiveString+0x6>
		get =UART_Receive();
		i++;
	}
	data[i]='\0';
	return data;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
