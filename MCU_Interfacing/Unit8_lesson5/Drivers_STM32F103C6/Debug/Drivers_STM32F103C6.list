
Drivers_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001028  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001158  08001158  00011158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001170  08001170  00011178  2**0
                  CONTENTS
  4 .ARM          00000000  08001170  08001170  00011178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001170  08001178  00011178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001170  08001170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001174  08001174  00011174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000000  08001178  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001178  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011178  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000646a  00000000  00000000  000111a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f81  00000000  00000000  0001760b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001290  00000000  00000000  0001858c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002c8  00000000  00000000  00019820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  00019ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001430  00000000  00000000  00019d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000345b  00000000  00000000  0001b168  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000d2ed  00000000  00000000  0001e5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002b8b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000960  00000000  00000000  0002b92c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001140 	.word	0x08001140

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001140 	.word	0x08001140

08000170 <EXTI0_IRQHandler>:
 *						ISR FUNCTIONS DEFINITIONS
 *=======================================================================
 *
*/
void EXTI0_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<0 ;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000078 	.word	0x20000078

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<1 ;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000078 	.word	0x20000078

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<2 ;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000078 	.word	0x20000078

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<3 ;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000078 	.word	0x20000078

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<4 ;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000078 	.word	0x20000078

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5)	{EXTI->PR |= (1 << 5) 	;GP_IRQ_CallBack[5]()	;	}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1 << 6)	{EXTI->PR |= (1 << 6) 	;GP_IRQ_CallBack[6]()	;	}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1 << 7)	{EXTI->PR |= (1 << 7) 	;GP_IRQ_CallBack[7]()	;	}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1 << 8)	{EXTI->PR |= (1 << 8) 	;GP_IRQ_CallBack[8]()	;	}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1 << 9)	{EXTI->PR |= (1 << 9) 	;GP_IRQ_CallBack[9]()	;	}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000078 	.word	0x20000078

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10)	{EXTI->PR |= (1 << 10) 	;GP_IRQ_CallBack[10]()	;	}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & 1 << 11)	{EXTI->PR |= (1 << 11) 	;GP_IRQ_CallBack[11]()	;	}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & 1 << 12)	{EXTI->PR |= (1 << 12) 	;GP_IRQ_CallBack[12]()	;	}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1 << 13)	{EXTI->PR |= (1 << 13) 	;GP_IRQ_CallBack[13]()	;	}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1 << 14)	{EXTI->PR |= (1 << 14) 	;GP_IRQ_CallBack[14]()	;	}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1 << 15)	{EXTI->PR |= (1 << 15) 	;GP_IRQ_CallBack[15]()	;	}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000078 	.word	0x20000078

08000390 <Get_CRLH_Position>:
//Includes
//---------------------------------------------------------
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D and E Modules but LQFP4
 *              	 package has only GPIO A,B and part of C AND D exported as
 *                external PINs from the MCU.
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 till 7
	//Port configuration register low (GPIOx_CRh) Configure PINS from 8 till 15
	volatile uint32_t * configregister = NULL;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]

	configregister =(PinConfig-> GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL:&GPIOx->CRH;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_Init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]

	//clear MODEy[1:0] CNFy[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			||(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			||(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD)
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			||(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP) )
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d11c      	bne.n	80004f2 <MCAL_GPIO_Init+0x9c>
	{
		//Set  CNFy[1:0] MODEy[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) &0x0f) ;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	73fb      	strb	r3, [r7, #15]
		(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80004d4:	7bfc      	ldrb	r4, [r7, #15]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff58 	bl	8000390 <Get_CRLH_Position>
 80004e0:	4603      	mov	r3, r0
 80004e2:	fa04 f203 	lsl.w	r2, r4, r3
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	e02c      	b.n	800054c <MCAL_GPIO_Init+0xf6>
	}
	//if Pin is input
	else //MODE= 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE==GPIO_MODE_Analog) )
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d003      	beq.n	8000502 <MCAL_GPIO_Init+0xac>
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d107      	bne.n	8000512 <MCAL_GPIO_Init+0xbc>
		{
			//Set  CNFy[1:0] MODEy[1:0]00
			PIN_Config =( (((PinConfig->GPIO_MODE ) << 2) | 0x0) &0x0f) ;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	73fb      	strb	r3, [r7, #15]
 8000510:	e01c      	b.n	800054c <MCAL_GPIO_Init+0xf6>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	2b08      	cmp	r3, #8
 8000518:	d102      	bne.n	8000520 <MCAL_GPIO_Init+0xca>
		{
			PIN_Config =( (((GPIO_MODE_INPUT_FLO ) << 2) | 0x0) &0x0f) ;
 800051a:	2304      	movs	r3, #4
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	e015      	b.n	800054c <MCAL_GPIO_Init+0xf6>
		}
		else //PU PD Input
		{
			PIN_Config =( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) &0x0f) ;
 8000520:	2308      	movs	r3, #8
 8000522:	73fb      	strb	r3, [r7, #15]
			if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU) )
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d107      	bne.n	800053c <MCAL_GPIO_Init+0xe6>
			{
				//PxODR=1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	8812      	ldrh	r2, [r2, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	e007      	b.n	800054c <MCAL_GPIO_Init+0xf6>
			}
			else
			{
				//PxODR=0 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	8812      	ldrh	r2, [r2, #0]
 8000544:	43d2      	mvns	r2, r2
 8000546:	401a      	ands	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on the CRL or CRH
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800054c:	7bfc      	ldrb	r4, [r7, #15]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff1c 	bl	8000390 <Get_CRLH_Position>
 8000558:	4603      	mov	r3, r0
 800055a:	fa04 f203 	lsl.w	r2, r4, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	431a      	orrs	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bd90      	pop	{r4, r7, pc}

08000570 <MCAL_GPIO_WritePin>:
 *
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
 800057c:	4613      	mov	r3, r2
 800057e:	707b      	strb	r3, [r7, #1]
	if( Value != (uint32_t)GPIO_PIN_RESET)
 8000580:	787b      	ldrb	r3, [r7, #1]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d006      	beq.n	8000594 <MCAL_GPIO_WritePin+0x24>
	{
		//GPIOx->ODR |= PinNumber;
		//or
		GPIOx->BSRR |= (uint32_t)PinNumber;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	691a      	ldr	r2, [r3, #16]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	431a      	orrs	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	611a      	str	r2, [r3, #16]

	}else
	{
		GPIOx->BRR |= (uint32_t)PinNumber;
	}
}
 8000592:	e005      	b.n	80005a0 <MCAL_GPIO_WritePin+0x30>
		GPIOx->BRR |= (uint32_t)PinNumber;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	887b      	ldrh	r3, [r7, #2]
 800059a:	431a      	orrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	615a      	str	r2, [r3, #20]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
	...

080005ac <I2C1_EV_IRQHandler>:
 *						ISR FUNCTIONS DEFINITIONS
 *=======================================================================
 *
*/
void I2C1_EV_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead ;
	I2C_TypeDef *I2Cx = I2C1;
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <I2C1_EV_IRQHandler+0xec>)
 80005b4:	617b      	str	r3, [r7, #20]
	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = I2Cx->I2C_CR2 & (I2C_CR2_ITEVTEN) ;// Event interrupt enable
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005be:	613b      	str	r3, [r7, #16]
	Temp_1 = I2Cx->I2C_CR2 & (I2C_CR2_ITBUFEN) ;// Buffer interrupt enable
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005c8:	613b      	str	r3, [r7, #16]

	Temp_1 = I2Cx->I2C_SR1 & (I2C_SR1_STOPF) ;// Stop detection (slave mode)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	613b      	str	r3, [r7, #16]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d009      	beq.n	80005ee <I2C1_EV_IRQHandler+0x42>
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d006      	beq.n	80005ee <I2C1_EV_IRQHandler+0x42>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2Cx->I2C_CR1 = 0x0000;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
		Global_I2C_Config[I2C1_INDEX].P_Slave_Event_CallBack(I2C_EV_STOP);
 80005e6:	4b2d      	ldr	r3, [pc, #180]	; (800069c <I2C1_EV_IRQHandler+0xf0>)
 80005e8:	6a1b      	ldr	r3, [r3, #32]
 80005ea:	2000      	movs	r0, #0
 80005ec:	4798      	blx	r3
	}

	/********************************************************************/
	Temp_3 = I2Cx->I2C_SR1 &(I2C_SR1_ADDR);		//ADDR
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]

	if(Temp_1 && Temp_3)
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d00c      	beq.n	8000618 <I2C1_EV_IRQHandler+0x6c>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d009      	beq.n	8000618 <I2C1_EV_IRQHandler+0x6c>
		/* clear ADDR flag
		 * In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set.
		 */

		/* Check master mode or slave mode */
		if(I2Cx->I2C_SR2 &(I2C_SR2_MSL))
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b00      	cmp	r3, #0
 800060e:	d103      	bne.n	8000618 <I2C1_EV_IRQHandler+0x6c>
		{ /* Master mode (Using polling mechanism not interrupt) */ }
		else
		{
			/* Slave mode */
			Global_I2C_Config[I2C1_INDEX].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <I2C1_EV_IRQHandler+0xf0>)
 8000612:	6a1b      	ldr	r3, [r3, #32]
 8000614:	2002      	movs	r0, #2
 8000616:	4798      	blx	r3
		}
	}

	/********************************************************************/
	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = I2Cx->I2C_SR1 &(I2C_SR1_TXE);		// TXE
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000620:	60fb      	str	r3, [r7, #12]

	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d015      	beq.n	8000654 <I2C1_EV_IRQHandler+0xa8>
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d012      	beq.n	8000654 <I2C1_EV_IRQHandler+0xa8>
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00f      	beq.n	8000654 <I2C1_EV_IRQHandler+0xa8>
	{
		/* Check master mode or slave mode */
		if(I2Cx->I2C_SR2 &(I2C_SR2_MSL))
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d109      	bne.n	8000654 <I2C1_EV_IRQHandler+0xa8>
		{ /* Master mode (Using polling mechanism not interrupt) */ }
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2Cx->I2C_SR2 &(I2C_SR2_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <I2C1_EV_IRQHandler+0xa8>
			{
				Global_I2C_Config[I2C1_INDEX].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <I2C1_EV_IRQHandler+0xf0>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	2003      	movs	r0, #3
 8000652:	4798      	blx	r3
		}
	}

	/********************************************************************/
	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = I2Cx->I2C_SR1 &(I2C_SR1_RXNE);		// RXNE
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065c:	60fb      	str	r3, [r7, #12]

	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d015      	beq.n	8000690 <I2C1_EV_IRQHandler+0xe4>
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d012      	beq.n	8000690 <I2C1_EV_IRQHandler+0xe4>
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00f      	beq.n	8000690 <I2C1_EV_IRQHandler+0xe4>
	{
		/* Check master mode or slave mode */
		if(I2Cx->I2C_SR2 &(I2C_SR2_MSL))
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	2b00      	cmp	r3, #0
 800067a:	d109      	bne.n	8000690 <I2C1_EV_IRQHandler+0xe4>
		{ /* Master mode (Using polling mechanism not interrupt) */ }
		else
		{
			/* Slave mode */
			if(!(I2Cx->I2C_SR2 &(I2C_SR2_TRA)))		//TRA: Transmitter/receiver: 0: Data bytes received
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <I2C1_EV_IRQHandler+0xe4>
			{
				Global_I2C_Config[I2C1_INDEX].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <I2C1_EV_IRQHandler+0xf0>)
 800068a:	6a1b      	ldr	r3, [r3, #32]
 800068c:	2004      	movs	r0, #4
 800068e:	4798      	blx	r3
			}
		}
	}
}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40005400 	.word	0x40005400
 800069c:	2000001c 	.word	0x2000001c

080006a0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <MCAL_RCC_GetSYSCLKFreq>:
 *						APIS FUNCTIONS DEFINITIONS
 *=======================================================================
 *
*/
uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable
	switch ( (RCC->CFGR >>2) & 0b11)
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MCAL_RCC_GetSYSCLKFreq+0x30>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	f003 0303 	and.w	r3, r3, #3
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d006      	beq.n	80006e4 <MCAL_RCC_GetSYSCLKFreq+0x20>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d302      	bcc.n	80006e0 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d004      	beq.n	80006e8 <MCAL_RCC_GetSYSCLKFreq+0x24>
 80006de:	e005      	b.n	80006ec <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
		case 0:
			return HSI_RC_clk ;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 80006e2:	e003      	b.n	80006ec <MCAL_RCC_GetSYSCLKFreq+0x28>
			break;

		case 1:
			//to do need to calculate it ----HSE user should specify it
			return HSE_Clock ;
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 80006e6:	e001      	b.n	80006ec <MCAL_RCC_GetSYSCLKFreq+0x28>
			break;

		case 2:
			//to do need to calculate it PLLCLK and PLLMUL & PLL source MUX
			return 16000000 ;
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 80006ea:	e7ff      	b.n	80006ec <MCAL_RCC_GetSYSCLKFreq+0x28>
			break;

	}
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000
 80006f8:	00f42400 	.word	0x00f42400

080006fc <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	//	Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_GetSYSCLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF] ) ;//the first	shift is multiplication
 8000700:	f7ff ffe0 	bl	80006c4 <MCAL_RCC_GetSYSCLKFreq>
 8000704:	4601      	mov	r1, r0
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <MCAL_RCC_GetHCLKFreq+0x20>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	091b      	lsrs	r3, r3, #4
 800070c:	f003 030f 	and.w	r3, r3, #15
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000712:	5cd3      	ldrb	r3, [r2, r3]
 8000714:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000718:	4618      	mov	r0, r3
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	08001160 	.word	0x08001160

08000724 <MCAL_RCC_GetPCLK1Freq>:


uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//	Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111] ) ;//the first	shift is multiplication
 8000728:	f7ff ffe8 	bl	80006fc <MCAL_RCC_GetHCLKFreq>
 800072c:	4601      	mov	r1, r0
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	f003 0307 	and.w	r3, r3, #7
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <MCAL_RCC_GetPCLK1Freq+0x24>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	08001158 	.word	0x08001158

0800074c <MCAL_RCC_GetPCLK2Freq>:


uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111] ) ;//the first	shift is multiplication
 8000750:	f7ff ffd4 	bl	80006fc <MCAL_RCC_GetHCLKFreq>
 8000754:	4601      	mov	r1, r0
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	0adb      	lsrs	r3, r3, #11
 800075c:	f003 0307 	and.w	r3, r3, #7
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000762:	5cd3      	ldrb	r3, [r2, r3]
 8000764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	08001158 	.word	0x08001158

08000774 <MCAL_SPI_Init>:
 * @retval 			-	none
 * Note 			-	Support for SPI full-duplex Master/Slave only & NSS HW/SW
 * 					-	in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init (SPI_TypeDef * SPIx, SPI_Config_t * SPI_Config )
{
 8000774:	b4b0      	push	{r4, r5, r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	//Safety for registers
	uint16_t tmpreg_CR1 = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2 = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a4a      	ldr	r2, [pc, #296]	; (80008b4 <MCAL_SPI_Init+0x140>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d113      	bne.n	80007b6 <MCAL_SPI_Init+0x42>
	{
		Global_SPI_Config1 = *SPI_Config;
 800078e:	4a4a      	ldr	r2, [pc, #296]	; (80008b8 <MCAL_SPI_Init+0x144>)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4614      	mov	r4, r2
 8000794:	461d      	mov	r5, r3
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800079e:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI1_Index] = &Global_SPI_Config1;
 80007a2:	4b46      	ldr	r3, [pc, #280]	; (80008bc <MCAL_SPI_Init+0x148>)
 80007a4:	4a44      	ldr	r2, [pc, #272]	; (80008b8 <MCAL_SPI_Init+0x144>)
 80007a6:	601a      	str	r2, [r3, #0]
		RCC_SPI1_CLK_EN();
 80007a8:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <MCAL_SPI_Init+0x14c>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a44      	ldr	r2, [pc, #272]	; (80008c0 <MCAL_SPI_Init+0x14c>)
 80007ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	e016      	b.n	80007e4 <MCAL_SPI_Init+0x70>

	}else if (SPIx == SPI2)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a42      	ldr	r2, [pc, #264]	; (80008c4 <MCAL_SPI_Init+0x150>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d112      	bne.n	80007e4 <MCAL_SPI_Init+0x70>
	{
		Global_SPI_Config2 = *SPI_Config;
 80007be:	4a42      	ldr	r2, [pc, #264]	; (80008c8 <MCAL_SPI_Init+0x154>)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	4614      	mov	r4, r2
 80007c4:	461d      	mov	r5, r3
 80007c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007ce:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI2_Index] = &Global_SPI_Config2;
 80007d2:	4b3a      	ldr	r3, [pc, #232]	; (80008bc <MCAL_SPI_Init+0x148>)
 80007d4:	4a3c      	ldr	r2, [pc, #240]	; (80008c8 <MCAL_SPI_Init+0x154>)
 80007d6:	605a      	str	r2, [r3, #4]
		RCC_SPI2_CLK_EN();
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <MCAL_SPI_Init+0x14c>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	4a38      	ldr	r2, [pc, #224]	; (80008c0 <MCAL_SPI_Init+0x14c>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e2:	61d3      	str	r3, [r2, #28]
	}

	//Enable SPI Module
	//CR1 Bit 6 SPE: SPI enable
	tmpreg_CR1 = (0x1U<<6) ;
 80007e4:	2340      	movs	r3, #64	; 0x40
 80007e6:	81fb      	strh	r3, [r7, #14]

	//Enable MASTER/SLAVE
	tmpreg_CR1 |= SPI_Config->Device_MODE ;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	881a      	ldrh	r2, [r3, #0]
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |= SPI_Config->Commnication_Mode ;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	885a      	ldrh	r2, [r3, #2]
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |= SPI_Config->Frame_Format ;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	889a      	ldrh	r2, [r3, #4]
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	4313      	orrs	r3, r2
 8000804:	81fb      	strh	r3, [r7, #14]

	//SPI_DATA_SIZE
	tmpreg_CR1 |= SPI_Config->DataSize ;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	88da      	ldrh	r2, [r3, #6]
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	4313      	orrs	r3, r2
 800080e:	81fb      	strh	r3, [r7, #14]

	//SPI_CLKPolarity
	tmpreg_CR1 |= SPI_Config->CLKPolarity ;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	891a      	ldrh	r2, [r3, #8]
 8000814:	89fb      	ldrh	r3, [r7, #14]
 8000816:	4313      	orrs	r3, r2
 8000818:	81fb      	strh	r3, [r7, #14]

	//SPI_CLCPhase
	tmpreg_CR1 |= SPI_Config->CLKPhase ;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	895a      	ldrh	r2, [r3, #10]
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	4313      	orrs	r3, r2
 8000822:	81fb      	strh	r3, [r7, #14]

	//=====================NSS======================
	if (SPI_Config->NSS == SPI_NSS_HW_Master_SS_Output_EN)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	899b      	ldrh	r3, [r3, #12]
 8000828:	2b04      	cmp	r3, #4
 800082a:	d105      	bne.n	8000838 <MCAL_SPI_Init+0xc4>
	{
		tmpreg_CR2 |= SPI_Config->NSS ;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	899a      	ldrh	r2, [r3, #12]
 8000830:	89bb      	ldrh	r3, [r7, #12]
 8000832:	4313      	orrs	r3, r2
 8000834:	81bb      	strh	r3, [r7, #12]
 8000836:	e00e      	b.n	8000856 <MCAL_SPI_Init+0xe2>

	}else if(SPI_Config->NSS == SPI_NSS_HW_Master_SS_Output_EN)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	899b      	ldrh	r3, [r3, #12]
 800083c:	2b04      	cmp	r3, #4
 800083e:	d105      	bne.n	800084c <MCAL_SPI_Init+0xd8>
	{
		tmpreg_CR2 &= SPI_Config->NSS ;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	899a      	ldrh	r2, [r3, #12]
 8000844:	89bb      	ldrh	r3, [r7, #12]
 8000846:	4013      	ands	r3, r2
 8000848:	81bb      	strh	r3, [r7, #12]
 800084a:	e004      	b.n	8000856 <MCAL_SPI_Init+0xe2>

	}else
	{
		tmpreg_CR1 |= SPI_Config->NSS ;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	899a      	ldrh	r2, [r3, #12]
 8000850:	89fb      	ldrh	r3, [r7, #14]
 8000852:	4313      	orrs	r3, r2
 8000854:	81fb      	strh	r3, [r7, #14]
	}

	//SPI_BaudRatePrescaler
	tmpreg_CR1 |= SPI_Config->SPI_BaudRatePrescaler ;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	89da      	ldrh	r2, [r3, #14]
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	4313      	orrs	r3, r2
 800085e:	81fb      	strh	r3, [r7, #14]

	//SPI_IRQ_Enable
	if (SPI_Config->IRQ_Enable != SPI_IRQ_Enable_NONE)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	7c1b      	ldrb	r3, [r3, #16]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d01a      	beq.n	800089e <MCAL_SPI_Init+0x12a>
	{
		tmpreg_CR2 |= SPI_Config->IRQ_Enable ;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	7c1b      	ldrb	r3, [r3, #16]
 800086c:	b29a      	uxth	r2, r3
 800086e:	89bb      	ldrh	r3, [r7, #12]
 8000870:	4313      	orrs	r3, r2
 8000872:	81bb      	strh	r3, [r7, #12]

		//Enable NVIC for SPIx IRQ
		if (SPIx == SPI1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <MCAL_SPI_Init+0x140>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d106      	bne.n	800088a <MCAL_SPI_Init+0x116>
			NVIC_IRQ35_SPI1_Enable;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MCAL_SPI_Init+0x158>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MCAL_SPI_Init+0x158>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	e009      	b.n	800089e <MCAL_SPI_Init+0x12a>
		else if (SPIx == SPI2)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <MCAL_SPI_Init+0x150>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d105      	bne.n	800089e <MCAL_SPI_Init+0x12a>
			NVIC_IRQ36_SPI2_Enable;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MCAL_SPI_Init+0x158>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <MCAL_SPI_Init+0x158>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6013      	str	r3, [r2, #0]
	}

	SPIx->CR1 = tmpreg_CR1 ;
 800089e:	89fa      	ldrh	r2, [r7, #14]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tmpreg_CR2 ;
 80008a4:	89ba      	ldrh	r2, [r7, #12]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	605a      	str	r2, [r3, #4]

}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bcb0      	pop	{r4, r5, r7}
 80008b2:	4770      	bx	lr
 80008b4:	40013000 	.word	0x40013000
 80008b8:	200000cc 	.word	0x200000cc
 80008bc:	20000064 	.word	0x20000064
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40003800 	.word	0x40003800
 80008c8:	200000b4 	.word	0x200000b4
 80008cc:	e000e104 	.word	0xe000e104

080008d0 <MCAL_SPI_GPIO_Set_Pins>:
* @param [in] 		-SPIx: where x can be (1..2 depending on device used)
* @retval 			-None
* Note				-Should enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_SPI_Init()
*/
void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef * SPIx)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if(SPIx == SPI1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a73      	ldr	r2, [pc, #460]	; (8000aa8 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d169      	bne.n	80009b4 <MCAL_SPI_GPIO_Set_Pins+0xe4>
	{
		//	PA4 : SPI1_NSS
		//	PA5 : SPI1_SCK
		//	PA6 : SPI1_MISO
		//	PA7 : SPI1_MOSI
		if(Global_SPI_Config[SPI1_Index]->Device_MODE == SPI_Device_MODE_Master)
 80008e0:	4b72      	ldr	r3, [pc, #456]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d134      	bne.n	8000954 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{
			//	PA4 : SPI1_NSS
			switch (Global_SPI_Config[SPI1_Index]->NSS)
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	899b      	ldrh	r3, [r3, #12]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d10c      	bne.n	800090e <MCAL_SPI_GPIO_Set_Pins+0x3e>
				MCAL_GPIO_Init(GPIOA, &PinCfg);
				break;

			case SPI_NSS_HW_Master_SS_Output_EN:
				//HW Master/NSS Output enabled AF push-pull
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80008f4:	2310      	movs	r3, #16
 80008f6:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80008f8:	2306      	movs	r3, #6
 80008fa:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	486a      	ldr	r0, [pc, #424]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000908:	f7ff fda5 	bl	8000456 <MCAL_GPIO_Init>
				break;
 800090c:	bf00      	nop
			}

			//	PA5 : SPI1_SCK
			//Master AF push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_5 ;
 800090e:	2320      	movs	r3, #32
 8000910:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000912:	2306      	movs	r3, #6
 8000914:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8000916:	2301      	movs	r3, #1
 8000918:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	4863      	ldr	r0, [pc, #396]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000922:	f7ff fd98 	bl	8000456 <MCAL_GPIO_Init>

			//	PA6 : SPI1_MISO (supported only full duplex)
			//full duplex / master Input floating
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 800092a:	2301      	movs	r3, #1
 800092c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	485e      	ldr	r0, [pc, #376]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000936:	f7ff fd8e 	bl	8000456 <MCAL_GPIO_Init>

			//	PA7 : SPI1_MOSI
			//full duplex / master AF push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_7 ;
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 800093e:	2306      	movs	r3, #6
 8000940:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4858      	ldr	r0, [pc, #352]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800094e:	f7ff fd82 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 8000952:	e0a4      	b.n	8000a9e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_HW_Slave)
 8000954:	4b55      	ldr	r3, [pc, #340]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	899b      	ldrh	r3, [r3, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d109      	bne.n	8000972 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800095e:	2310      	movs	r3, #16
 8000960:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000962:	2301      	movs	r3, #1
 8000964:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	4850      	ldr	r0, [pc, #320]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800096e:	f7ff fd72 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000972:	2320      	movs	r3, #32
 8000974:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000976:	2301      	movs	r3, #1
 8000978:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	484b      	ldr	r0, [pc, #300]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000982:	f7ff fd68 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_6 ;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 800098a:	2306      	movs	r3, #6
 800098c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 800098e:	2301      	movs	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4845      	ldr	r0, [pc, #276]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800099a:	f7ff fd5c 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80009a2:	2301      	movs	r3, #1
 80009a4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	4840      	ldr	r0, [pc, #256]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80009ae:	f7ff fd52 	bl	8000456 <MCAL_GPIO_Init>
}
 80009b2:	e074      	b.n	8000a9e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	}else if(SPIx == SPI2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a3f      	ldr	r2, [pc, #252]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d170      	bne.n	8000a9e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Config[SPI2_Index]->Device_MODE == SPI_Device_MODE_Master)
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d138      	bne.n	8000a38 <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch (Global_SPI_Config[SPI2_Index]->NSS)
 80009c6:	4b39      	ldr	r3, [pc, #228]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	899b      	ldrh	r3, [r3, #12]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d10d      	bne.n	80009ec <MCAL_SPI_GPIO_Set_Pins+0x11c>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80009d6:	2306      	movs	r3, #6
 80009d8:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4619      	mov	r1, r3
 80009e4:	4834      	ldr	r0, [pc, #208]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80009e6:	f7ff fd36 	bl	8000456 <MCAL_GPIO_Init>
				break;
 80009ea:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13 ;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80009f2:	2306      	movs	r3, #6
 80009f4:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a02:	f7ff fd28 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a0a:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4828      	ldr	r0, [pc, #160]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a18:	f7ff fd1d 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15 ;
 8000a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a20:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000a22:	2306      	movs	r3, #6
 8000a24:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a32:	f7ff fd10 	bl	8000456 <MCAL_GPIO_Init>
}
 8000a36:	e032      	b.n	8000a9e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_HW_Slave)
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	899b      	ldrh	r3, [r3, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10a      	bne.n	8000a58 <MCAL_SPI_GPIO_Set_Pins+0x188>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a46:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4619      	mov	r1, r3
 8000a52:	4819      	ldr	r0, [pc, #100]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a54:	f7ff fcff 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a6a:	f7ff fcf4 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14 ;
 8000a6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a72:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000a74:	2306      	movs	r3, #6
 8000a76:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a84:	f7ff fce7 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a8c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a9a:	f7ff fcdc 	bl	8000456 <MCAL_GPIO_Init>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40013000 	.word	0x40013000
 8000aac:	20000064 	.word	0x20000064
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40003800 	.word	0x40003800
 8000ab8:	40010c00 	.word	0x40010c00

08000abc <MCAL_SPI_SendData>:
 * @param[in]		-	PollingEn: Enable or Disable polling
 * @retval 			-	none
 * Note 			-	Should initialize SPI first
 */
void MCAL_SPI_SendData (SPI_TypeDef * SPIx, uint16_t *pTxBuffer, enum PollingMechanism PollingEn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	71fb      	strb	r3, [r7, #7]
	if (PollingEn == PollingEnable)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d106      	bne.n	8000ade <MCAL_SPI_SendData+0x22>
		while(!(SPIx->SR & SPI_SR_TXE));
 8000ad0:	bf00      	nop
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f9      	beq.n	8000ad2 <MCAL_SPI_SendData+0x16>

	SPIx->DR = *pTxBuffer ;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	60da      	str	r2, [r3, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <MCAL_SPI_ReceiveData>:
* @param [in] 		-PollingEn Enable/Disable polling
* @retval 			-None
* Note				-None
*/
void MCAL_SPI_ReceiveData (SPI_TypeDef * SPIx, uint16_t *pRxBuffer, enum PollingMechanism PollingEn)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	4613      	mov	r3, r2
 8000afe:	71fb      	strb	r3, [r7, #7]
	if (PollingEn == PollingEnable)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d106      	bne.n	8000b14 <MCAL_SPI_ReceiveData+0x22>
		while(!(SPIx->SR & SPI_SR_RXNE));
 8000b06:	bf00      	nop
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f9      	beq.n	8000b08 <MCAL_SPI_ReceiveData+0x16>

	*pRxBuffer = SPIx->DR ;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	801a      	strh	r2, [r3, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <MCAL_SPI_TX_RX>:
* @param [in] 		-PollingEn Enable/Disable polling
* @retval 			-None
* Note				-None
*/
void MCAL_SPI_TX_RX (SPI_TypeDef * SPIx, uint16_t *pTRxBuffer, enum PollingMechanism PollingEn)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	4613      	mov	r3, r2
 8000b34:	71fb      	strb	r3, [r7, #7]
	//Transmit
	MCAL_SPI_SendData( SPIx, pTRxBuffer, PollingEn);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff ffbd 	bl	8000abc <MCAL_SPI_SendData>

	//Receive
	MCAL_SPI_ReceiveData( SPIx, pTRxBuffer, PollingEn);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	461a      	mov	r2, r3
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffd2 	bl	8000af2 <MCAL_SPI_ReceiveData>
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <SPI1_IRQHandler>:
 *						ISR FUNCTIONS DEFINITIONS
 *=======================================================================
 *
*/
void SPI1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( (SPI1->SR & (1<<1)) >>1 );
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SPI1_IRQHandler+0x44>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	793b      	ldrb	r3, [r7, #4]
 8000b6c:	f362 0300 	bfi	r3, r2, #0, #1
 8000b70:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1<<0)) >>1 );
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <SPI1_IRQHandler+0x44>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	793b      	ldrb	r3, [r7, #4]
 8000b78:	f36f 0341 	bfc	r3, #1, #1
 8000b7c:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1<<4)) >>1 );
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <SPI1_IRQHandler+0x44>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	793b      	ldrb	r3, [r7, #4]
 8000b84:	f36f 0382 	bfc	r3, #2, #1
 8000b88:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SPI1_IRQHandler+0x48>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	7938      	ldrb	r0, [r7, #4]
 8000b92:	4798      	blx	r3
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	20000064 	.word	0x20000064

08000ba4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( (SPI2->SR & (1<<1)) >>1 );
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <SPI2_IRQHandler+0x44>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	793b      	ldrb	r3, [r7, #4]
 8000bb8:	f362 0300 	bfi	r3, r2, #0, #1
 8000bbc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1<<0)) >>1 );
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <SPI2_IRQHandler+0x44>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	793b      	ldrb	r3, [r7, #4]
 8000bc4:	f36f 0341 	bfc	r3, #1, #1
 8000bc8:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1<<4)) >>1 );
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <SPI2_IRQHandler+0x44>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	793b      	ldrb	r3, [r7, #4]
 8000bd0:	f36f 0382 	bfc	r3, #2, #1
 8000bd4:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SPI2_IRQHandler+0x48>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	7938      	ldrb	r0, [r7, #4]
 8000bde:	4798      	blx	r3
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40003800 	.word	0x40003800
 8000bec:	20000064 	.word	0x20000064

08000bf0 <MCAL_USART_Init>:
 * @param[in]		-	USART_Config: All USART Configuration EXTI_PinConfig_t
 * @retval 			-	none
 * Note 			-	Support for now Asynch mode & Clock 8Mhz
 */
void MCAL_USART_Init (USART_TypeDef * USARTx, USART_Config_t * USART_Config )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
	uint32_t pclk ,BRR ;

	//enable the Clock for given USART peripheral
	if (USARTx == USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a5a      	ldr	r2, [pc, #360]	; (8000d68 <MCAL_USART_Init+0x178>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d109      	bne.n	8000c16 <MCAL_USART_Init+0x26>
	{
		Global_USART_Config[0] = USART_Config;
 8000c02:	4a5a      	ldr	r2, [pc, #360]	; (8000d6c <MCAL_USART_Init+0x17c>)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	6013      	str	r3, [r2, #0]
		RCC_USART1_CLK_EN();
 8000c08:	4b59      	ldr	r3, [pc, #356]	; (8000d70 <MCAL_USART_Init+0x180>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a58      	ldr	r2, [pc, #352]	; (8000d70 <MCAL_USART_Init+0x180>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	e01a      	b.n	8000c4c <MCAL_USART_Init+0x5c>
	}
	else if (USARTx == USART2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a56      	ldr	r2, [pc, #344]	; (8000d74 <MCAL_USART_Init+0x184>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d109      	bne.n	8000c32 <MCAL_USART_Init+0x42>
	{
		Global_USART_Config[1] = USART_Config;
 8000c1e:	4a53      	ldr	r2, [pc, #332]	; (8000d6c <MCAL_USART_Init+0x17c>)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	6053      	str	r3, [r2, #4]
		RCC_USART2_CLK_EN();
 8000c24:	4b52      	ldr	r3, [pc, #328]	; (8000d70 <MCAL_USART_Init+0x180>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	4a51      	ldr	r2, [pc, #324]	; (8000d70 <MCAL_USART_Init+0x180>)
 8000c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2e:	61d3      	str	r3, [r2, #28]
 8000c30:	e00c      	b.n	8000c4c <MCAL_USART_Init+0x5c>
	}
	else if (USARTx == USART3)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a50      	ldr	r2, [pc, #320]	; (8000d78 <MCAL_USART_Init+0x188>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d108      	bne.n	8000c4c <MCAL_USART_Init+0x5c>
	{
		Global_USART_Config[2] = USART_Config;
 8000c3a:	4a4c      	ldr	r2, [pc, #304]	; (8000d6c <MCAL_USART_Init+0x17c>)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	6093      	str	r3, [r2, #8]
		RCC_USART3_CLK_EN();
 8000c40:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <MCAL_USART_Init+0x180>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	4a4a      	ldr	r2, [pc, #296]	; (8000d70 <MCAL_USART_Init+0x180>)
 8000c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4a:	61d3      	str	r3, [r2, #28]
	}

	//Enable USART Module
	//	Bit 13 UE: USART enable
	USARTx->CR1 |= (1<<13) ;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	60da      	str	r2, [r3, #12]

	//Enable TX/RX engines according to the USART_Mode Configuration item
	//USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= USART_Config->USART_MODE ;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	7812      	ldrb	r2, [r2, #0]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	//USART_CR1 Bit 12 M: Word length
	USARTx->CR1 |= USART_Config->Payload_Length ;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	7892      	ldrb	r2, [r2, #2]
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	//USART_CR1 Bit 9 PS: Parity selection----Bit 10 PCE: Parity control enable
	USARTx->CR1 |= USART_Config->Parity ;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	78d2      	ldrb	r2, [r2, #3]
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60da      	str	r2, [r3, #12]

	//Configure the number of stop bits
	//USART_CR2 Bit 13:12 STOP: STOP bits
	USARTx->CR1 |= USART_Config->StopBits ;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	7912      	ldrb	r2, [r2, #4]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60da      	str	r2, [r3, #12]

	//USART hardware flow control
	//USART_CR3 //Bit 9 CTSE: CTS enable------Bit 8 RTSE: RTS enable
	USARTx->CR1 |= USART_Config->HWFlowCtl ;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	7952      	ldrb	r2, [r2, #5]
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60da      	str	r2, [r3, #12]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2,3
	//PCLK1 for USART1
	if (USARTx == USART1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <MCAL_USART_Init+0x178>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d103      	bne.n	8000cae <MCAL_USART_Init+0xbe>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000ca6:	f7ff fd51 	bl	800074c <MCAL_RCC_GetPCLK2Freq>
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	e002      	b.n	8000cb4 <MCAL_USART_Init+0xc4>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000cae:	f7ff fd39 	bl	8000724 <MCAL_RCC_GetPCLK1Freq>
 8000cb2:	60f8      	str	r0, [r7, #12]
	}
	BRR = USART_BRR_Register(pclk, USART_Config->BaudRate);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cc2:	0119      	lsls	r1, r3, #4
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	009a      	lsls	r2, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	7852      	ldrb	r2, [r2, #1]
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	785b      	ldrb	r3, [r3, #1]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	fb00 f303 	mul.w	r3, r0, r3
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <MCAL_USART_Init+0x18c>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	095b      	lsrs	r3, r3, #5
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//UASRT_CR1
	if (USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	799b      	ldrb	r3, [r3, #6]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d026      	beq.n	8000d5e <MCAL_USART_Init+0x16e>
	{
		USARTx->CR1 |= USART_Config->IRQ_Enable ;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	7992      	ldrb	r2, [r2, #6]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60da      	str	r2, [r3, #12]

		//Enable NVIC for USARTx IRQ
		if (USARTx == USART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <MCAL_USART_Init+0x178>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d106      	bne.n	8000d34 <MCAL_USART_Init+0x144>
			NVIC_IRQ37_USART1_Enable;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MCAL_USART_Init+0x190>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MCAL_USART_Init+0x190>)
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable;

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}
}
 8000d32:	e014      	b.n	8000d5e <MCAL_USART_Init+0x16e>
		else if (USARTx == USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <MCAL_USART_Init+0x184>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d106      	bne.n	8000d4a <MCAL_USART_Init+0x15a>
			NVIC_IRQ38_USART2_Enable;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MCAL_USART_Init+0x190>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <MCAL_USART_Init+0x190>)
 8000d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	e009      	b.n	8000d5e <MCAL_USART_Init+0x16e>
		else if (USARTx == USART3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <MCAL_USART_Init+0x188>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d105      	bne.n	8000d5e <MCAL_USART_Init+0x16e>
			NVIC_IRQ39_USART3_Enable;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MCAL_USART_Init+0x190>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <MCAL_USART_Init+0x190>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	2000006c 	.word	0x2000006c
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40004400 	.word	0x40004400
 8000d78:	40004800 	.word	0x40004800
 8000d7c:	51eb851f 	.word	0x51eb851f
 8000d80:	e000e104 	.word	0xe000e104

08000d84 <MCAL_USART_GPIO_Set_Pins>:
* @param [in] 		-USARTx: where x can be (1..3 depending on device used)
* @retval 			-None
* Note				-Should enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_USART_Init()
*/
void MCAL_USART_GPIO_Set_Pins (USART_TypeDef * USARTx)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig;
	if (USARTx == USART1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a2b      	ldr	r2, [pc, #172]	; (8000e3c <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d118      	bne.n	8000dc6 <MCAL_USART_GPIO_Set_Pins+0x42>
	{
		//PA9 TX
		PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d98:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4825      	ldr	r0, [pc, #148]	; (8000e40 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000daa:	f7ff fb54 	bl	8000456 <MCAL_GPIO_Init>

		//PA10 Rx
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db2:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000db4:	2308      	movs	r3, #8
 8000db6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4820      	ldr	r0, [pc, #128]	; (8000e40 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000dc0:	f7ff fb49 	bl	8000456 <MCAL_GPIO_Init>
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinConfig);
		}
	}

}
 8000dc4:	e036      	b.n	8000e34 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d116      	bne.n	8000dfc <MCAL_USART_GPIO_Set_Pins+0x78>
		PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000de2:	f7ff fb38 	bl	8000456 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000de6:	2308      	movs	r3, #8
 8000de8:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000dea:	2308      	movs	r3, #8
 8000dec:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4619      	mov	r1, r3
 8000df4:	4812      	ldr	r0, [pc, #72]	; (8000e40 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000df6:	f7ff fb2e 	bl	8000456 <MCAL_GPIO_Init>
}
 8000dfa:	e01b      	b.n	8000e34 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d117      	bne.n	8000e34 <MCAL_USART_GPIO_Set_Pins+0xb0>
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e08:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000e1a:	f7ff fb1c 	bl	8000456 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e22:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000e24:	2308      	movs	r3, #8
 8000e26:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000e30:	f7ff fb11 	bl	8000456 <MCAL_GPIO_Init>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40010800 	.word	0x40010800
 8000e44:	40004400 	.word	0x40004400
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <MCAL_USART_SendData>:
 * 						the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
 * 						because it is replaced by the parity.
 * 						When receiving with the parity enabled, the value read in the MSB bit is the received parity bit
 */
void MCAL_USART_SendData (USART_TypeDef * USARTx, uint16_t *pTxBuffer, enum Polling_mechanism PollingEn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	i = (USARTx == USART1)?0 : (USARTx == USART2)?1 : 2 ;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <MCAL_USART_SendData+0x54>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <MCAL_USART_SendData+0x26>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <MCAL_USART_SendData+0x58>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <MCAL_USART_SendData+0x22>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e002      	b.n	8000e78 <MCAL_USART_SendData+0x28>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e000      	b.n	8000e78 <MCAL_USART_SendData+0x28>
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]

	//wait until TXE flag is set in the SR (is empty)
	if (PollingEn == enable)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <MCAL_USART_SendData+0x3e>
		while(! (USARTx->SR & 1<<7));
 8000e80:	bf00      	nop
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f9      	beq.n	8000e82 <MCAL_USART_SendData+0x32>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer & (uint16_t)0xFF);
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	605a      	str	r2, [r3, #4]
	}
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40013800 	.word	0x40013800
 8000ea8:	40004400 	.word	0x40004400

08000eac <MCAL_USART_ReceiveData>:
* @param [in] 		-PollingEn Enable/Disable polling
* @retval 			-None
* Note				-None
*/
void MCAL_USART_ReceiveData (USART_TypeDef * USARTx, uint16_t *pRxBuffer, enum Polling_mechanism PollingEn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	i = (USARTx == USART1)?0 : (USARTx == USART2)?1 : 2 ;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <MCAL_USART_ReceiveData+0x74>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <MCAL_USART_ReceiveData+0x26>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <MCAL_USART_ReceiveData+0x78>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <MCAL_USART_ReceiveData+0x22>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e002      	b.n	8000ed4 <MCAL_USART_ReceiveData+0x28>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e000      	b.n	8000ed4 <MCAL_USART_ReceiveData+0x28>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]

	//wait until RXNE flag is set in the SR
	if (PollingEn == enable)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <MCAL_USART_ReceiveData+0x3e>
		while(! (USARTx->SR & 1<<5));
 8000edc:	bf00      	nop
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <MCAL_USART_ReceiveData+0x32>
		}

	}else
	{
		//This is 8bit data
		if (Global_USART_Config[i]->Parity == USART_Parity_NONE)
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <MCAL_USART_ReceiveData+0x7c>)
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	78db      	ldrb	r3, [r3, #3]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d105      	bne.n	8000f04 <MCAL_USART_ReceiveData+0x58>
		{
			//no parity so All 8bit are considered data
			*((uint16_t*) pRxBuffer) = USARTx->DR ;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	801a      	strh	r2, [r3, #0]
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
		}

	}

}
 8000f02:	e007      	b.n	8000f14 <MCAL_USART_ReceiveData+0x68>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40004400 	.word	0x40004400
 8000f28:	2000006c 	.word	0x2000006c

08000f2c <USART1_IRQHandler>:
 *						ISR FUNCTIONS DEFINITIONS
 *=======================================================================
 *
*/
void USART1_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <USART1_IRQHandler+0x10>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	4798      	blx	r3
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000006c 	.word	0x2000006c

08000f40 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <USART2_IRQHandler+0x10>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	4798      	blx	r3
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000006c 	.word	0x2000006c

08000f54 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <USART3_IRQHandler+0x10>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	4798      	blx	r3
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000006c 	.word	0x2000006c

08000f68 <clock_init>:

#define MCU_Act_As_Master
//#define MCU_Act_As_Slave

void clock_init()
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC_GPIOA_CLK_EN ();
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <clock_init+0x30>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <clock_init+0x30>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN ();
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <clock_init+0x30>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <clock_init+0x30>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	6193      	str	r3, [r2, #24]
	//Enable AFIO
	RCC_AFIO_CLK_EN ();
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <clock_init+0x30>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <clock_init+0x30>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6193      	str	r3, [r2, #24]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40021000 	.word	0x40021000

08000f9c <UART_IRQ_Callback>:
#endif
}


void UART_IRQ_Callback(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
#ifdef MCU_Act_As_Master
	MCAL_USART_ReceiveData(USART1, &ch, disable);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <UART_IRQ_Callback+0x3c>)
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <UART_IRQ_Callback+0x40>)
 8000fa6:	f7ff ff81 	bl	8000eac <MCAL_USART_ReceiveData>
	MCAL_USART_SendData(USART1, &ch, enable);
 8000faa:	2200      	movs	r2, #0
 8000fac:	490a      	ldr	r1, [pc, #40]	; (8000fd8 <UART_IRQ_Callback+0x3c>)
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <UART_IRQ_Callback+0x40>)
 8000fb0:	f7ff ff4e 	bl	8000e50 <MCAL_USART_SendData>
	//Send to SPI
	MCAL_GPIO_WritePin(GPIOA, 4, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <UART_IRQ_Callback+0x44>)
 8000fba:	f7ff fad9 	bl	8000570 <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &ch, PollingEnable);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4905      	ldr	r1, [pc, #20]	; (8000fd8 <UART_IRQ_Callback+0x3c>)
 8000fc2:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <UART_IRQ_Callback+0x48>)
 8000fc4:	f7ff fdb0 	bl	8000b28 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, 4, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <UART_IRQ_Callback+0x44>)
 8000fce:	f7ff facf 	bl	8000570 <MCAL_GPIO_WritePin>

#endif
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000e4 	.word	0x200000e4
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <main>:

int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
	//================UART INIT=================
	USART_Config_t uartCFG;
	clock_init();
 8000fee:	f7ff ffbb 	bl	8000f68 <clock_init>
	uartCFG.BaudRate = USART_BaudRate_115200 ;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	777b      	strb	r3, [r7, #29]
	uartCFG.HWFlowCtl = USART_HWFlowCtl_NONE ;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNEIE ;
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback ;
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <main+0xac>)
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
	uartCFG.Parity = USART_Parity_NONE ;
 8001006:	2300      	movs	r3, #0
 8001008:	77fb      	strb	r3, [r7, #31]
	uartCFG.Payload_Length = USART_Payload_Length_8B ;
 800100a:	2300      	movs	r3, #0
 800100c:	77bb      	strb	r3, [r7, #30]
	uartCFG.StopBits = USART_StopBits__1 ;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3020 	strb.w	r3, [r7, #32]
	uartCFG.USART_MODE = USART_MODE_TX_RX ;
 8001014:	230c      	movs	r3, #12
 8001016:	773b      	strb	r3, [r7, #28]

	MCAL_USART_Init(USART1, &uartCFG);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	481e      	ldr	r0, [pc, #120]	; (8001098 <main+0xb0>)
 8001020:	f7ff fde6 	bl	8000bf0 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 8001024:	481c      	ldr	r0, [pc, #112]	; (8001098 <main+0xb0>)
 8001026:	f7ff fead 	bl	8000d84 <MCAL_USART_GPIO_Set_Pins>

	//SPI INIT
	SPI_Config_t SPI1CFG ;

	//Common configuration
	SPI1CFG.CLKPhase = SPI_CLKPhase_2EDGE_first_DataCapture ;
 800102a:	2302      	movs	r3, #2
 800102c:	81fb      	strh	r3, [r7, #14]
	SPI1CFG.CLKPolarity = SPI_CLKPolarity_HIGH_whenIdle ;
 800102e:	2302      	movs	r3, #2
 8001030:	81bb      	strh	r3, [r7, #12]
	SPI1CFG.DataSize = SPI_DataSize_8Bit ;
 8001032:	2300      	movs	r3, #0
 8001034:	817b      	strh	r3, [r7, #10]
	SPI1CFG.Frame_Format = SPI_Frame_Format_MSB_TXFirst ;
 8001036:	2300      	movs	r3, #0
 8001038:	813b      	strh	r3, [r7, #8]
	SPI1CFG.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8 ;
 800103a:	2310      	movs	r3, #16
 800103c:	827b      	strh	r3, [r7, #18]

	#ifdef MCU_Act_As_Master
		SPI1CFG.Device_MODE = SPI_Device_MODE_Master ;
 800103e:	2304      	movs	r3, #4
 8001040:	80bb      	strh	r3, [r7, #4]
		SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_NONE ;
 8001042:	2300      	movs	r3, #0
 8001044:	753b      	strb	r3, [r7, #20]
		SPI1CFG.NSS = SPI_NSS_SW_internal_Set ;
 8001046:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104a:	823b      	strh	r3, [r7, #16]
		SPI1CFG.P_IRQ_CallBack = NULL ;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
	#endif

	MCAL_SPI_Init(SPI1, &SPI1CFG);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4811      	ldr	r0, [pc, #68]	; (800109c <main+0xb4>)
 8001056:	f7ff fb8d 	bl	8000774 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <main+0xb4>)
 800105c:	f7ff fc38 	bl	80008d0 <MCAL_SPI_GPIO_Set_Pins>

	//Configure SS on PORTA Pin4 By GPIO
	GPIO_PinConfig_t PinCfg ;

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8001060:	2310      	movs	r3, #16
 8001062:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8001064:	2306      	movs	r3, #6
 8001066:	70bb      	strb	r3, [r7, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8001068:	2301      	movs	r3, #1
 800106a:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <main+0xb8>)
 8001072:	f7ff f9f0 	bl	8000456 <MCAL_GPIO_Init>

	//Force the Slave Select (High) idle mide
	MCAL_GPIO_WritePin(GPIOA, 4, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	2104      	movs	r1, #4
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <main+0xb8>)
 800107c:	f7ff fa78 	bl	8000570 <MCAL_GPIO_WritePin>
		SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
		SPI1CFG.NSS = SPI_NSS_Hard_Slave;
		SPI1CFG.P_IRQ_Callback = SPI1_IRQ_Callback;
	#endif

		MCAL_SPI_Init(SPI1, &SPI1CFG);
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <main+0xb4>)
 8001086:	f7ff fb75 	bl	8000774 <MCAL_SPI_Init>
		MCAL_SPI_GPIO_Set_Pins(SPI1);
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <main+0xb4>)
 800108c:	f7ff fc20 	bl	80008d0 <MCAL_SPI_GPIO_Set_Pins>
	while(1)
 8001090:	e7fe      	b.n	8001090 <main+0xa8>
 8001092:	bf00      	nop
 8001094:	08000f9d 	.word	0x08000f9d
 8001098:	40013800 	.word	0x40013800
 800109c:	40013000 	.word	0x40013000
 80010a0:	40010800 	.word	0x40010800

080010a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	; (80010e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <LoopForever+0xe>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	; (80010f0 <LoopForever+0x16>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010d2:	f000 f811 	bl	80010f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d6:	f7ff ff87 	bl	8000fe8 <main>

080010da <LoopForever>:

LoopForever:
    b LoopForever
 80010da:	e7fe      	b.n	80010da <LoopForever>
  ldr   r0, =_estack
 80010dc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80010e8:	08001178 	.word	0x08001178
  ldr r2, =_sbss
 80010ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80010f0:	200000e8 	.word	0x200000e8

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>
	...

080010f8 <__libc_init_array>:
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	2500      	movs	r5, #0
 80010fc:	4e0c      	ldr	r6, [pc, #48]	; (8001130 <__libc_init_array+0x38>)
 80010fe:	4c0d      	ldr	r4, [pc, #52]	; (8001134 <__libc_init_array+0x3c>)
 8001100:	1ba4      	subs	r4, r4, r6
 8001102:	10a4      	asrs	r4, r4, #2
 8001104:	42a5      	cmp	r5, r4
 8001106:	d109      	bne.n	800111c <__libc_init_array+0x24>
 8001108:	f000 f81a 	bl	8001140 <_init>
 800110c:	2500      	movs	r5, #0
 800110e:	4e0a      	ldr	r6, [pc, #40]	; (8001138 <__libc_init_array+0x40>)
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <__libc_init_array+0x44>)
 8001112:	1ba4      	subs	r4, r4, r6
 8001114:	10a4      	asrs	r4, r4, #2
 8001116:	42a5      	cmp	r5, r4
 8001118:	d105      	bne.n	8001126 <__libc_init_array+0x2e>
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001120:	4798      	blx	r3
 8001122:	3501      	adds	r5, #1
 8001124:	e7ee      	b.n	8001104 <__libc_init_array+0xc>
 8001126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800112a:	4798      	blx	r3
 800112c:	3501      	adds	r5, #1
 800112e:	e7f2      	b.n	8001116 <__libc_init_array+0x1e>
 8001130:	08001170 	.word	0x08001170
 8001134:	08001170 	.word	0x08001170
 8001138:	08001170 	.word	0x08001170
 800113c:	08001174 	.word	0x08001174

08001140 <_init>:
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001142:	bf00      	nop
 8001144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001146:	bc08      	pop	{r3}
 8001148:	469e      	mov	lr, r3
 800114a:	4770      	bx	lr

0800114c <_fini>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	bf00      	nop
 8001150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001152:	bc08      	pop	{r3}
 8001154:	469e      	mov	lr, r3
 8001156:	4770      	bx	lr
