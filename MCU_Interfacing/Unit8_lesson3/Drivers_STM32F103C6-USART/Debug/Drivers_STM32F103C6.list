
Drivers_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000af8  08000af8  00010af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b14  08000b14  00010b1c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b14  08000b14  00010b1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b14  08000b1c  00010b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b14  08000b14  00010b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b18  08000b18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000b1c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000b1c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004041  00000000  00000000  00010b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a17  00000000  00000000  00014b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a54  00000000  00000000  0001559d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00015ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  000161c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000dbd  00000000  00000000  00016340  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002409  00000000  00000000  000170fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ae2e  00000000  00000000  00019506  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024334  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000590  00000000  00000000  000243b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ae0 	.word	0x08000ae0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ae0 	.word	0x08000ae0

08000170 <EXTI0_IRQHandler>:
 *						ISR FUNCTIONS DEFINITIONS
 *=======================================================================
 *
*/
void EXTI0_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<0 ;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000028 	.word	0x20000028

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<1 ;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000028 	.word	0x20000028

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<2 ;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000028 	.word	0x20000028

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<3 ;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000028 	.word	0x20000028

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1<<4 ;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000028 	.word	0x20000028

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5)	{EXTI->PR |= (1 << 5) 	;GP_IRQ_CallBack[5]()	;	}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1 << 6)	{EXTI->PR |= (1 << 6) 	;GP_IRQ_CallBack[6]()	;	}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1 << 7)	{EXTI->PR |= (1 << 7) 	;GP_IRQ_CallBack[7]()	;	}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1 << 8)	{EXTI->PR |= (1 << 8) 	;GP_IRQ_CallBack[8]()	;	}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1 << 9)	{EXTI->PR |= (1 << 9) 	;GP_IRQ_CallBack[9]()	;	}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000028 	.word	0x20000028

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10)	{EXTI->PR |= (1 << 10) 	;GP_IRQ_CallBack[10]()	;	}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & 1 << 11)	{EXTI->PR |= (1 << 11) 	;GP_IRQ_CallBack[11]()	;	}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & 1 << 12)	{EXTI->PR |= (1 << 12) 	;GP_IRQ_CallBack[12]()	;	}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1 << 13)	{EXTI->PR |= (1 << 13) 	;GP_IRQ_CallBack[13]()	;	}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1 << 14)	{EXTI->PR |= (1 << 14) 	;GP_IRQ_CallBack[14]()	;	}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1 << 15)	{EXTI->PR |= (1 << 15) 	;GP_IRQ_CallBack[15]()	;	}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000028 	.word	0x20000028

08000390 <Get_CRLH_Position>:
//Includes
//---------------------------------------------------------
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D and E Modules but LQFP4
 *              	 package has only GPIO A,B and part of C AND D exported as
 *                external PINs from the MCU.
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 till 7
	//Port configuration register low (GPIOx_CRh) Configure PINS from 8 till 15
	volatile uint32_t * configregister = NULL;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]

	configregister =(PinConfig-> GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL:&GPIOx->CRH;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_Init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]

	//clear MODEy[1:0] CNFy[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			||(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			||(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD)
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			||(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP) )
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d11c      	bne.n	80004f2 <MCAL_GPIO_Init+0x9c>
	{
		//Set  CNFy[1:0] MODEy[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) &0x0f) ;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	73fb      	strb	r3, [r7, #15]
		(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80004d4:	7bfc      	ldrb	r4, [r7, #15]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff58 	bl	8000390 <Get_CRLH_Position>
 80004e0:	4603      	mov	r3, r0
 80004e2:	fa04 f203 	lsl.w	r2, r4, r3
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	e02c      	b.n	800054c <MCAL_GPIO_Init+0xf6>
	}
	//if Pin is input
	else //MODE= 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE==GPIO_MODE_Analog) )
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d003      	beq.n	8000502 <MCAL_GPIO_Init+0xac>
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d107      	bne.n	8000512 <MCAL_GPIO_Init+0xbc>
		{
			//Set  CNFy[1:0] MODEy[1:0]00
			PIN_Config =( (((PinConfig->GPIO_MODE ) << 2) | 0x0) &0x0f) ;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	73fb      	strb	r3, [r7, #15]
 8000510:	e01c      	b.n	800054c <MCAL_GPIO_Init+0xf6>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	2b08      	cmp	r3, #8
 8000518:	d102      	bne.n	8000520 <MCAL_GPIO_Init+0xca>
		{
			PIN_Config =( (((GPIO_MODE_INPUT_FLO ) << 2) | 0x0) &0x0f) ;
 800051a:	2304      	movs	r3, #4
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	e015      	b.n	800054c <MCAL_GPIO_Init+0xf6>
		}
		else //PU PD Input
		{
			PIN_Config =( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) &0x0f) ;
 8000520:	2308      	movs	r3, #8
 8000522:	73fb      	strb	r3, [r7, #15]
			if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU) )
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d107      	bne.n	800053c <MCAL_GPIO_Init+0xe6>
			{
				//PxODR=1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	8812      	ldrh	r2, [r2, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	e007      	b.n	800054c <MCAL_GPIO_Init+0xf6>
			}
			else
			{
				//PxODR=0 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	8812      	ldrh	r2, [r2, #0]
 8000544:	43d2      	mvns	r2, r2
 8000546:	401a      	ands	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on the CRL or CRH
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800054c:	7bfc      	ldrb	r4, [r7, #15]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff1c 	bl	8000390 <Get_CRLH_Position>
 8000558:	4603      	mov	r3, r0
 800055a:	fa04 f203 	lsl.w	r2, r4, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	431a      	orrs	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bd90      	pop	{r4, r7, pc}

08000570 <MCAL_RCC_GetSYSCLKFreq>:
 *						APIS FUNCTIONS DEFINITIONS
 *=======================================================================
 *
*/
uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable
	switch ( (RCC->CFGR >>2) & 0b11)
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <MCAL_RCC_GetSYSCLKFreq+0x30>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	2b01      	cmp	r3, #1
 8000580:	d006      	beq.n	8000590 <MCAL_RCC_GetSYSCLKFreq+0x20>
 8000582:	2b01      	cmp	r3, #1
 8000584:	d302      	bcc.n	800058c <MCAL_RCC_GetSYSCLKFreq+0x1c>
 8000586:	2b02      	cmp	r3, #2
 8000588:	d004      	beq.n	8000594 <MCAL_RCC_GetSYSCLKFreq+0x24>
 800058a:	e005      	b.n	8000598 <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
		case 0:
			return HSI_RC_clk ;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 800058e:	e003      	b.n	8000598 <MCAL_RCC_GetSYSCLKFreq+0x28>
			break;

		case 1:
			//to do need to calculate it ----HSE user should specify it
			return HSE_Clock ;
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000592:	e001      	b.n	8000598 <MCAL_RCC_GetSYSCLKFreq+0x28>
			break;

		case 2:
			//to do need to calculate it PLLCLK and PLLMUL & PLL source MUX
			return 16000000 ;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000596:	e7ff      	b.n	8000598 <MCAL_RCC_GetSYSCLKFreq+0x28>
			break;

	}
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000
 80005a4:	00f42400 	.word	0x00f42400

080005a8 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	//	Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_GetSYSCLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF] ) ;//the first	shift is multiplication
 80005ac:	f7ff ffe0 	bl	8000570 <MCAL_RCC_GetSYSCLKFreq>
 80005b0:	4601      	mov	r1, r0
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MCAL_RCC_GetHCLKFreq+0x20>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	091b      	lsrs	r3, r3, #4
 80005b8:	f003 030f 	and.w	r3, r3, #15
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <MCAL_RCC_GetHCLKFreq+0x24>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	08000b04 	.word	0x08000b04

080005d0 <MCAL_RCC_GetPCLK1Freq>:


uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	//	Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111] ) ;//the first	shift is multiplication
 80005d4:	f7ff ffe8 	bl	80005a8 <MCAL_RCC_GetHCLKFreq>
 80005d8:	4601      	mov	r1, r0
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	f003 0307 	and.w	r3, r3, #7
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005e6:	5cd3      	ldrb	r3, [r2, r3]
 80005e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	08000afc 	.word	0x08000afc

080005f8 <MCAL_RCC_GetPCLK2Freq>:


uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111] ) ;//the first	shift is multiplication
 80005fc:	f7ff ffd4 	bl	80005a8 <MCAL_RCC_GetHCLKFreq>
 8000600:	4601      	mov	r1, r0
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	0adb      	lsrs	r3, r3, #11
 8000608:	f003 0307 	and.w	r3, r3, #7
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800060e:	5cd3      	ldrb	r3, [r2, r3]
 8000610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000614:	4618      	mov	r0, r3
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	08000afc 	.word	0x08000afc

08000620 <MCAL_USART_Init>:
 * @param[in]		-	USART_Config: All USART Configuration EXTI_PinConfig_t
 * @retval 			-	none
 * Note 			-	Support for now Asynch mode & Clock 8Mhz
 */
void MCAL_USART_Init (USART_TypeDef * USARTx, USART_Config_t * USART_Config )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	uint32_t pclk ,BRR ;

	//enable the Clock for given USART peripheral
	if (USARTx == USART1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a5a      	ldr	r2, [pc, #360]	; (8000798 <MCAL_USART_Init+0x178>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d109      	bne.n	8000646 <MCAL_USART_Init+0x26>
	{
		Global_USART_Config[0] = USART_Config;
 8000632:	4a5a      	ldr	r2, [pc, #360]	; (800079c <MCAL_USART_Init+0x17c>)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	6013      	str	r3, [r2, #0]
		RCC_USART1_CLK_EN();
 8000638:	4b59      	ldr	r3, [pc, #356]	; (80007a0 <MCAL_USART_Init+0x180>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a58      	ldr	r2, [pc, #352]	; (80007a0 <MCAL_USART_Init+0x180>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	e01a      	b.n	800067c <MCAL_USART_Init+0x5c>
	}
	else if (USARTx == USART2)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a56      	ldr	r2, [pc, #344]	; (80007a4 <MCAL_USART_Init+0x184>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d109      	bne.n	8000662 <MCAL_USART_Init+0x42>
	{
		Global_USART_Config[1] = USART_Config;
 800064e:	4a53      	ldr	r2, [pc, #332]	; (800079c <MCAL_USART_Init+0x17c>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6053      	str	r3, [r2, #4]
		RCC_USART2_CLK_EN();
 8000654:	4b52      	ldr	r3, [pc, #328]	; (80007a0 <MCAL_USART_Init+0x180>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a51      	ldr	r2, [pc, #324]	; (80007a0 <MCAL_USART_Init+0x180>)
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	61d3      	str	r3, [r2, #28]
 8000660:	e00c      	b.n	800067c <MCAL_USART_Init+0x5c>
	}
	else if (USARTx == USART3)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a50      	ldr	r2, [pc, #320]	; (80007a8 <MCAL_USART_Init+0x188>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d108      	bne.n	800067c <MCAL_USART_Init+0x5c>
	{
		Global_USART_Config[2] = USART_Config;
 800066a:	4a4c      	ldr	r2, [pc, #304]	; (800079c <MCAL_USART_Init+0x17c>)
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	6093      	str	r3, [r2, #8]
		RCC_USART3_CLK_EN();
 8000670:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <MCAL_USART_Init+0x180>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a4a      	ldr	r2, [pc, #296]	; (80007a0 <MCAL_USART_Init+0x180>)
 8000676:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067a:	61d3      	str	r3, [r2, #28]
	}

	//Enable USART Module
	//	Bit 13 UE: USART enable
	USARTx->CR1 |= (1<<13) ;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	60da      	str	r2, [r3, #12]

	//Enable TX/RX engines according to the USART_Mode Configuration item
	//USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= USART_Config->USART_MODE ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	7812      	ldrb	r2, [r2, #0]
 8000690:	431a      	orrs	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	//USART_CR1 Bit 12 M: Word length
	USARTx->CR1 |= USART_Config->Payload_Length ;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	7892      	ldrb	r2, [r2, #2]
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	//USART_CR1 Bit 9 PS: Parity selection----Bit 10 PCE: Parity control enable
	USARTx->CR1 |= USART_Config->Parity ;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	78d2      	ldrb	r2, [r2, #3]
 80006ac:	431a      	orrs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60da      	str	r2, [r3, #12]

	//Configure the number of stop bits
	//USART_CR2 Bit 13:12 STOP: STOP bits
	USARTx->CR1 |= USART_Config->StopBits ;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	7912      	ldrb	r2, [r2, #4]
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	60da      	str	r2, [r3, #12]

	//USART hardware flow control
	//USART_CR3 //Bit 9 CTSE: CTS enable------Bit 8 RTSE: RTS enable
	USARTx->CR1 |= USART_Config->HWFlowCtl ;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	7952      	ldrb	r2, [r2, #5]
 80006c8:	431a      	orrs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60da      	str	r2, [r3, #12]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2,3
	//PCLK1 for USART1
	if (USARTx == USART1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a31      	ldr	r2, [pc, #196]	; (8000798 <MCAL_USART_Init+0x178>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d103      	bne.n	80006de <MCAL_USART_Init+0xbe>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 80006d6:	f7ff ff8f 	bl	80005f8 <MCAL_RCC_GetPCLK2Freq>
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	e002      	b.n	80006e4 <MCAL_USART_Init+0xc4>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 80006de:	f7ff ff77 	bl	80005d0 <MCAL_RCC_GetPCLK1Freq>
 80006e2:	60f8      	str	r0, [r7, #12]
	}
	BRR = USART_BRR_Register(pclk, USART_Config->BaudRate);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80006f2:	0119      	lsls	r1, r3, #4
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	009a      	lsls	r2, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	7852      	ldrb	r2, [r2, #1]
 8000704:	0092      	lsls	r2, r2, #2
 8000706:	fbb3 f2f2 	udiv	r2, r3, r2
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	4618      	mov	r0, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	fbb3 f3f0 	udiv	r3, r3, r0
 8000718:	2064      	movs	r0, #100	; 0x64
 800071a:	fb00 f303 	mul.w	r3, r0, r3
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4a22      	ldr	r2, [pc, #136]	; (80007ac <MCAL_USART_Init+0x18c>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	095b      	lsrs	r3, r3, #5
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	430b      	orrs	r3, r1
 8000730:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//UASRT_CR1
	if (USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	799b      	ldrb	r3, [r3, #6]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d026      	beq.n	800078e <MCAL_USART_Init+0x16e>
	{
		USARTx->CR1 |= USART_Config->IRQ_Enable ;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	7992      	ldrb	r2, [r2, #6]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60da      	str	r2, [r3, #12]

		//Enable NVIC for USARTx IRQ
		if (USARTx == USART1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <MCAL_USART_Init+0x178>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d106      	bne.n	8000764 <MCAL_USART_Init+0x144>
			NVIC_IRQ37_USART1_Enable;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MCAL_USART_Init+0x190>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MCAL_USART_Init+0x190>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable;

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}
}
 8000762:	e014      	b.n	800078e <MCAL_USART_Init+0x16e>
		else if (USARTx == USART2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <MCAL_USART_Init+0x184>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d106      	bne.n	800077a <MCAL_USART_Init+0x15a>
			NVIC_IRQ38_USART2_Enable;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MCAL_USART_Init+0x190>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <MCAL_USART_Init+0x190>)
 8000772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	e009      	b.n	800078e <MCAL_USART_Init+0x16e>
		else if (USARTx == USART3)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <MCAL_USART_Init+0x188>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d105      	bne.n	800078e <MCAL_USART_Init+0x16e>
			NVIC_IRQ39_USART3_Enable;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MCAL_USART_Init+0x190>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <MCAL_USART_Init+0x190>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6013      	str	r3, [r2, #0]
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40013800 	.word	0x40013800
 800079c:	2000001c 	.word	0x2000001c
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40004400 	.word	0x40004400
 80007a8:	40004800 	.word	0x40004800
 80007ac:	51eb851f 	.word	0x51eb851f
 80007b0:	e000e104 	.word	0xe000e104

080007b4 <MCAL_USART_GPIO_Set_Pins>:
* @param [in] 		-USARTx: where x can be (1..3 depending on device used)
* @retval 			-None
* Note				-Should enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_USART_Init()
*/
void MCAL_USART_GPIO_Set_Pins (USART_TypeDef * USARTx)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig;
	if (USARTx == USART1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a2b      	ldr	r2, [pc, #172]	; (800086c <MCAL_USART_GPIO_Set_Pins+0xb8>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d118      	bne.n	80007f6 <MCAL_USART_GPIO_Set_Pins+0x42>
	{
		//PA9 TX
		PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 80007c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c8:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007ca:	2306      	movs	r3, #6
 80007cc:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4825      	ldr	r0, [pc, #148]	; (8000870 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 80007da:	f7ff fe3c 	bl	8000456 <MCAL_GPIO_Init>

		//PA10 Rx
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80007e4:	2308      	movs	r3, #8
 80007e6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4820      	ldr	r0, [pc, #128]	; (8000870 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 80007f0:	f7ff fe31 	bl	8000456 <MCAL_GPIO_Init>
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinConfig);
		}
	}

}
 80007f4:	e036      	b.n	8000864 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART2)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d116      	bne.n	800082c <MCAL_USART_GPIO_Set_Pins+0x78>
		PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80007fe:	2304      	movs	r3, #4
 8000800:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000802:	2306      	movs	r3, #6
 8000804:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000806:	2301      	movs	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4619      	mov	r1, r3
 8000810:	4817      	ldr	r0, [pc, #92]	; (8000870 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000812:	f7ff fe20 	bl	8000456 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000816:	2308      	movs	r3, #8
 8000818:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800081a:	2308      	movs	r3, #8
 800081c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000826:	f7ff fe16 	bl	8000456 <MCAL_GPIO_Init>
}
 800082a:	e01b      	b.n	8000864 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d117      	bne.n	8000864 <MCAL_USART_GPIO_Set_Pins+0xb0>
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000838:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800083a:	2306      	movs	r3, #6
 800083c:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800083e:	2301      	movs	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 800084a:	f7ff fe04 	bl	8000456 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 800084e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000852:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000854:	2308      	movs	r3, #8
 8000856:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000860:	f7ff fdf9 	bl	8000456 <MCAL_GPIO_Init>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40013800 	.word	0x40013800
 8000870:	40010800 	.word	0x40010800
 8000874:	40004400 	.word	0x40004400
 8000878:	40004800 	.word	0x40004800
 800087c:	40010c00 	.word	0x40010c00

08000880 <MCAL_USART_SendData>:
 * 						the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
 * 						because it is replaced by the parity.
 * 						When receiving with the parity enabled, the value read in the MSB bit is the received parity bit
 */
void MCAL_USART_SendData (USART_TypeDef * USARTx, uint16_t *pTxBuffer, enum Polling_mechanism PollingEn)
{
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	4613      	mov	r3, r2
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	i = (USARTx == USART1)?0 : (USARTx == USART2)?1 : 2 ;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <MCAL_USART_SendData+0x54>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d007      	beq.n	80008a6 <MCAL_USART_SendData+0x26>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <MCAL_USART_SendData+0x58>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <MCAL_USART_SendData+0x22>
 800089e:	2301      	movs	r3, #1
 80008a0:	e002      	b.n	80008a8 <MCAL_USART_SendData+0x28>
 80008a2:	2302      	movs	r3, #2
 80008a4:	e000      	b.n	80008a8 <MCAL_USART_SendData+0x28>
 80008a6:	2300      	movs	r3, #0
 80008a8:	75fb      	strb	r3, [r7, #23]

	//wait until TXE flag is set in the SR (is empty)
	if (PollingEn == enable)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d106      	bne.n	80008be <MCAL_USART_SendData+0x3e>
		while(! (USARTx->SR & 1<<7));
 80008b0:	bf00      	nop
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f9      	beq.n	80008b2 <MCAL_USART_SendData+0x32>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer & (uint16_t)0xFF);
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	605a      	str	r2, [r3, #4]
	}
}
 80008c8:	bf00      	nop
 80008ca:	371c      	adds	r7, #28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40013800 	.word	0x40013800
 80008d8:	40004400 	.word	0x40004400

080008dc <MCAL_USART_ReceiveData>:
* @param [in] 		-PollingEn Enable/Disable polling
* @retval 			-None
* Note				-None
*/
void MCAL_USART_ReceiveData (USART_TypeDef * USARTx, uint16_t *pRxBuffer, enum Polling_mechanism PollingEn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4613      	mov	r3, r2
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	i = (USARTx == USART1)?0 : (USARTx == USART2)?1 : 2 ;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MCAL_USART_ReceiveData+0x74>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d007      	beq.n	8000902 <MCAL_USART_ReceiveData+0x26>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MCAL_USART_ReceiveData+0x78>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <MCAL_USART_ReceiveData+0x22>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e002      	b.n	8000904 <MCAL_USART_ReceiveData+0x28>
 80008fe:	2302      	movs	r3, #2
 8000900:	e000      	b.n	8000904 <MCAL_USART_ReceiveData+0x28>
 8000902:	2300      	movs	r3, #0
 8000904:	75fb      	strb	r3, [r7, #23]

	//wait until RXNE flag is set in the SR
	if (PollingEn == enable)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d106      	bne.n	800091a <MCAL_USART_ReceiveData+0x3e>
		while(! (USARTx->SR & 1<<5));
 800090c:	bf00      	nop
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f9      	beq.n	800090e <MCAL_USART_ReceiveData+0x32>
		}

	}else
	{
		//This is 8bit data
		if (Global_USART_Config[i]->Parity == USART_Parity_NONE)
 800091a:	7dfb      	ldrb	r3, [r7, #23]
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <MCAL_USART_ReceiveData+0x7c>)
 800091e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000922:	78db      	ldrb	r3, [r3, #3]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d105      	bne.n	8000934 <MCAL_USART_ReceiveData+0x58>
		{
			//no parity so All 8bit are considered data
			*((uint16_t*) pRxBuffer) = USARTx->DR ;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	b29a      	uxth	r2, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	801a      	strh	r2, [r3, #0]
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
		}

	}

}
 8000932:	e007      	b.n	8000944 <MCAL_USART_ReceiveData+0x68>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F );
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	b29b      	uxth	r3, r3
 800093a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800093e:	b29a      	uxth	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	801a      	strh	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	371c      	adds	r7, #28
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40013800 	.word	0x40013800
 8000954:	40004400 	.word	0x40004400
 8000958:	2000001c 	.word	0x2000001c

0800095c <USART1_IRQHandler>:
 *						ISR FUNCTIONS DEFINITIONS
 *=======================================================================
 *
*/
void USART1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <USART1_IRQHandler+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	4798      	blx	r3
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000001c 	.word	0x2000001c

08000970 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000974:	4b02      	ldr	r3, [pc, #8]	; (8000980 <USART2_IRQHandler+0x10>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	4798      	blx	r3
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000001c 	.word	0x2000001c

08000984 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <USART3_IRQHandler+0x10>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	4798      	blx	r3
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000001c 	.word	0x2000001c

08000998 <clock_init>:
#include "Stm32_F103C6_gpio_driver.h"
#include "Stm32_F103C6_EXTI_driver.h"
#include "Stm32_F103C6_USART_driver.h"

void clock_init()
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC_GPIOA_CLK_EN ();
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <clock_init+0x30>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <clock_init+0x30>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN ();
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <clock_init+0x30>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <clock_init+0x30>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6193      	str	r3, [r2, #24]
	//Enable AFIO
	RCC_AFIO_CLK_EN ();
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <clock_init+0x30>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <clock_init+0x30>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6193      	str	r3, [r2, #24]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000

080009cc <UART_IRQ_Callback>:


unsigned char ch ;

void UART_IRQ_Callback(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	MCAL_USART_ReceiveData(USART1, &ch, disable);
 80009d0:	2201      	movs	r2, #1
 80009d2:	4905      	ldr	r1, [pc, #20]	; (80009e8 <UART_IRQ_Callback+0x1c>)
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <UART_IRQ_Callback+0x20>)
 80009d6:	f7ff ff81 	bl	80008dc <MCAL_USART_ReceiveData>
	MCAL_USART_SendData(USART1, &ch, enable);
 80009da:	2200      	movs	r2, #0
 80009dc:	4902      	ldr	r1, [pc, #8]	; (80009e8 <UART_IRQ_Callback+0x1c>)
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <UART_IRQ_Callback+0x20>)
 80009e0:	f7ff ff4e 	bl	8000880 <MCAL_USART_SendData>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000064 	.word	0x20000064
 80009ec:	40013800 	.word	0x40013800

080009f0 <main>:

int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
	USART_Config_t uartCFG;

	clock_init();
 80009f6:	f7ff ffcf 	bl	8000998 <clock_init>
	uartCFG.BaudRate = USART_BaudRate_115200 ;
 80009fa:	2300      	movs	r3, #0
 80009fc:	717b      	strb	r3, [r7, #5]
	uartCFG.HWFlowCtl = USART_HWFlowCtl_NONE ;
 80009fe:	2300      	movs	r3, #0
 8000a00:	727b      	strb	r3, [r7, #9]
	uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNEIE ;
 8000a02:	2320      	movs	r3, #32
 8000a04:	72bb      	strb	r3, [r7, #10]
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback ;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <main+0x44>)
 8000a08:	60fb      	str	r3, [r7, #12]
	uartCFG.Parity = USART_Parity_NONE ;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	uartCFG.Payload_Length = USART_Payload_Length_8B ;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71bb      	strb	r3, [r7, #6]
	uartCFG.StopBits = USART_StopBits__1 ;
 8000a12:	2300      	movs	r3, #0
 8000a14:	723b      	strb	r3, [r7, #8]
	uartCFG.USART_MODE = USART_MODE_TX_RX ;
 8000a16:	230c      	movs	r3, #12
 8000a18:	713b      	strb	r3, [r7, #4]

	MCAL_USART_Init(USART1, &uartCFG);
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <main+0x48>)
 8000a20:	f7ff fdfe 	bl	8000620 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <main+0x48>)
 8000a26:	f7ff fec5 	bl	80007b4 <MCAL_USART_GPIO_Set_Pins>

	ch ="K";
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <main+0x4c>)
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <main+0x50>)
 8000a30:	701a      	strb	r2, [r3, #0]
	while(1)
 8000a32:	e7fe      	b.n	8000a32 <main+0x42>
 8000a34:	080009cd 	.word	0x080009cd
 8000a38:	40013800 	.word	0x40013800
 8000a3c:	08000af8 	.word	0x08000af8
 8000a40:	20000064 	.word	0x20000064

08000a44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a46:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a48:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a72:	f000 f811 	bl	8000a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a76:	f7ff ffbb 	bl	80009f0 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   r0, =_estack
 8000a7c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a88:	08000b1c 	.word	0x08000b1c
  ldr r2, =_sbss
 8000a8c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a90:	20000068 	.word	0x20000068

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <__libc_init_array>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	2500      	movs	r5, #0
 8000a9c:	4e0c      	ldr	r6, [pc, #48]	; (8000ad0 <__libc_init_array+0x38>)
 8000a9e:	4c0d      	ldr	r4, [pc, #52]	; (8000ad4 <__libc_init_array+0x3c>)
 8000aa0:	1ba4      	subs	r4, r4, r6
 8000aa2:	10a4      	asrs	r4, r4, #2
 8000aa4:	42a5      	cmp	r5, r4
 8000aa6:	d109      	bne.n	8000abc <__libc_init_array+0x24>
 8000aa8:	f000 f81a 	bl	8000ae0 <_init>
 8000aac:	2500      	movs	r5, #0
 8000aae:	4e0a      	ldr	r6, [pc, #40]	; (8000ad8 <__libc_init_array+0x40>)
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	; (8000adc <__libc_init_array+0x44>)
 8000ab2:	1ba4      	subs	r4, r4, r6
 8000ab4:	10a4      	asrs	r4, r4, #2
 8000ab6:	42a5      	cmp	r5, r4
 8000ab8:	d105      	bne.n	8000ac6 <__libc_init_array+0x2e>
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ac0:	4798      	blx	r3
 8000ac2:	3501      	adds	r5, #1
 8000ac4:	e7ee      	b.n	8000aa4 <__libc_init_array+0xc>
 8000ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aca:	4798      	blx	r3
 8000acc:	3501      	adds	r5, #1
 8000ace:	e7f2      	b.n	8000ab6 <__libc_init_array+0x1e>
 8000ad0:	08000b14 	.word	0x08000b14
 8000ad4:	08000b14 	.word	0x08000b14
 8000ad8:	08000b14 	.word	0x08000b14
 8000adc:	08000b18 	.word	0x08000b18

08000ae0 <_init>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	bf00      	nop
 8000ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae6:	bc08      	pop	{r3}
 8000ae8:	469e      	mov	lr, r3
 8000aea:	4770      	bx	lr

08000aec <_fini>:
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	bf00      	nop
 8000af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000af2:	bc08      	pop	{r3}
 8000af4:	469e      	mov	lr, r3
 8000af6:	4770      	bx	lr
